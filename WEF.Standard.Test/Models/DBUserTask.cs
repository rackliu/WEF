//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由WEF数据库工具, Version=3.8.6.6, Culture=neutral, PublicKeyToken=null生成;时间 2019-12-09 17:07:32.418
//     运行时版本:4.0.30319.42000
//     不建议手动更改此代码，如有需要请自行扩展partial类
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Runtime.Serialization;
using WEF;
using WEF.Common;
using WEF.Section;
using System.Collections.Generic;

namespace WEF.Models
{

    /// <summary>
    /// 实体类DBUserTask
    /// </summary>
    [Serializable, DataContract, TableAttribute("tb_usertask")]
    public partial class DBUserTask : Entity
    {
        private static string m_tableName;
        public DBUserTask() : base("tb_usertask") { m_tableName = "tb_usertask"; }
        public DBUserTask(string tableName) : base(tableName) { m_tableName = tableName; }

        #region Model
        private string _Usertaskid;
        private string _Userid;
        private string _Taskid;
        private string _Taskname;
        private int? _Tasktype;
        private int? _Taskrewardtype;
        private string _Giftid;
        private string _Point;
        private DateTime? _Taskfinishtime;
        private DateTime? _Taskfinishdate;
        private DateTime? _Taskreceivedate;
        private DateTime? _Taskexpireddate;
        private DateTime? _Getpointtime;
        private int? _Status;
        private string _Remark;
        private DateTime _Createtime;
        private DateTime _Updatetime;
        private bool _Isenabled;
        private bool? _Isdel;
        private string _Clearcode;
        private string _Clearmessage;
        private int? _Platformid;
        /// <summary>
        /// Usertaskid 
        /// </summary>
        [DataMember]
        public string Usertaskid
        {
            get { return _Usertaskid; }
            set
            {
                this.OnPropertyValueChange(_.Usertaskid, _Usertaskid, value);
                this._Usertaskid = value;
            }
        }
        /// <summary>
        /// Userid 
        /// </summary>
        [DataMember]
        public string Userid
        {
            get { return _Userid; }
            set
            {
                this.OnPropertyValueChange(_.Userid, _Userid, value);
                this._Userid = value;
            }
        }
        /// <summary>
        /// Taskid 
        /// </summary>
        [DataMember]
        public string Taskid
        {
            get { return _Taskid; }
            set
            {
                this.OnPropertyValueChange(_.Taskid, _Taskid, value);
                this._Taskid = value;
            }
        }
        /// <summary>
        /// Taskname 
        /// </summary>
        [DataMember]
        public string Taskname
        {
            get { return _Taskname; }
            set
            {
                this.OnPropertyValueChange(_.Taskname, _Taskname, value);
                this._Taskname = value;
            }
        }
        /// <summary>
        /// Tasktype 
        /// </summary>
        [DataMember]
        public int? Tasktype
        {
            get { return _Tasktype; }
            set
            {
                this.OnPropertyValueChange(_.Tasktype, _Tasktype, value);
                this._Tasktype = value;
            }
        }
        /// <summary>
        /// Taskrewardtype 
        /// </summary>
        [DataMember]
        public int? Taskrewardtype
        {
            get { return _Taskrewardtype; }
            set
            {
                this.OnPropertyValueChange(_.Taskrewardtype, _Taskrewardtype, value);
                this._Taskrewardtype = value;
            }
        }
        /// <summary>
        /// Giftid 
        /// </summary>
        [DataMember]
        public string Giftid
        {
            get { return _Giftid; }
            set
            {
                this.OnPropertyValueChange(_.Giftid, _Giftid, value);
                this._Giftid = value;
            }
        }
        /// <summary>
        /// Point 
        /// </summary>
        [DataMember]
        public string Point
        {
            get { return _Point; }
            set
            {
                this.OnPropertyValueChange(_.Point, _Point, value);
                this._Point = value;
            }
        }
        /// <summary>
        /// Taskfinishtime 
        /// </summary>
        [DataMember]
        public DateTime? Taskfinishtime
        {
            get { return _Taskfinishtime; }
            set
            {
                this.OnPropertyValueChange(_.Taskfinishtime, _Taskfinishtime, value);
                this._Taskfinishtime = value;
            }
        }
        /// <summary>
        /// Taskfinishdate 
        /// </summary>
        [DataMember]
        public DateTime? Taskfinishdate
        {
            get { return _Taskfinishdate; }
            set
            {
                this.OnPropertyValueChange(_.Taskfinishdate, _Taskfinishdate, value);
                this._Taskfinishdate = value;
            }
        }
        /// <summary>
        /// Taskreceivedate 
        /// </summary>
        [DataMember]
        public DateTime? Taskreceivedate
        {
            get { return _Taskreceivedate; }
            set
            {
                this.OnPropertyValueChange(_.Taskreceivedate, _Taskreceivedate, value);
                this._Taskreceivedate = value;
            }
        }
        /// <summary>
        /// Taskexpireddate 
        /// </summary>
        [DataMember]
        public DateTime? Taskexpireddate
        {
            get { return _Taskexpireddate; }
            set
            {
                this.OnPropertyValueChange(_.Taskexpireddate, _Taskexpireddate, value);
                this._Taskexpireddate = value;
            }
        }
        /// <summary>
        /// Getpointtime 
        /// </summary>
        [DataMember]
        public DateTime? Getpointtime
        {
            get { return _Getpointtime; }
            set
            {
                this.OnPropertyValueChange(_.Getpointtime, _Getpointtime, value);
                this._Getpointtime = value;
            }
        }
        /// <summary>
        /// Status 
        /// </summary>
        [DataMember]
        public int? Status
        {
            get { return _Status; }
            set
            {
                this.OnPropertyValueChange(_.Status, _Status, value);
                this._Status = value;
            }
        }
        /// <summary>
        /// Remark 
        /// </summary>
        [DataMember]
        public string Remark
        {
            get { return _Remark; }
            set
            {
                this.OnPropertyValueChange(_.Remark, _Remark, value);
                this._Remark = value;
            }
        }
        /// <summary>
        /// Createtime 
        /// </summary>
        [DataMember]
        public DateTime Createtime
        {
            get { return _Createtime; }
            set
            {
                this.OnPropertyValueChange(_.Createtime, _Createtime, value);
                this._Createtime = value;
            }
        }
        /// <summary>
        /// Updatetime 
        /// </summary>
        [DataMember]
        public DateTime Updatetime
        {
            get { return _Updatetime; }
            set
            {
                this.OnPropertyValueChange(_.Updatetime, _Updatetime, value);
                this._Updatetime = value;
            }
        }
        /// <summary>
        /// Isenabled 
        /// </summary>
        [DataMember]
        public bool Isenabled
        {
            get { return _Isenabled; }
            set
            {
                this.OnPropertyValueChange(_.Isenabled, _Isenabled, value);
                this._Isenabled = value;
            }
        }
        /// <summary>
        /// Isdel 
        /// </summary>
        [DataMember]
        public bool? Isdel
        {
            get { return _Isdel; }
            set
            {
                this.OnPropertyValueChange(_.Isdel, _Isdel, value);
                this._Isdel = value;
            }
        }
        /// <summary>
        /// Clearcode 
        /// </summary>
        [DataMember]
        public string Clearcode
        {
            get { return _Clearcode; }
            set
            {
                this.OnPropertyValueChange(_.Clearcode, _Clearcode, value);
                this._Clearcode = value;
            }
        }
        /// <summary>
        /// Clearmessage 
        /// </summary>
        [DataMember]
        public string Clearmessage
        {
            get { return _Clearmessage; }
            set
            {
                this.OnPropertyValueChange(_.Clearmessage, _Clearmessage, value);
                this._Clearmessage = value;
            }
        }
        /// <summary>
        /// Platformid 
        /// </summary>
        [DataMember]
        public int? Platformid
        {
            get { return _Platformid; }
            set
            {
                this.OnPropertyValueChange(_.Platformid, _Platformid, value);
                this._Platformid = value;
            }
        }
        #endregion

        #region Method
        /// <summary>
        /// 获取实体中的主键列
        /// </summary>
        public override Field[] GetPrimaryKeyFields()
        {
            return new Field[] {
                _.Usertaskid};
        }
        /// <summary>
        /// 获取列信息
        /// </summary>
        public override Field[] GetFields()
        {
            return new Field[] {
                _.Usertaskid,
                _.Userid,
                _.Taskid,
                _.Taskname,
                _.Tasktype,
                _.Taskrewardtype,
                _.Giftid,
                _.Point,
                _.Taskfinishtime,
                _.Taskfinishdate,
                _.Taskreceivedate,
                _.Taskexpireddate,
                _.Getpointtime,
                _.Status,
                _.Remark,
                _.Createtime,
                _.Updatetime,
                _.Isenabled,
                _.Isdel,
                _.Clearcode,
                _.Clearmessage,
                _.Platformid};
        }
        /// <summary>
        /// 获取值信息
        /// </summary>
        public override object[] GetValues()
        {
            return new object[] {
                this._Usertaskid,
                this._Userid,
                this._Taskid,
                this._Taskname,
                this._Tasktype,
                this._Taskrewardtype,
                this._Giftid,
                this._Point,
                this._Taskfinishtime,
                this._Taskfinishdate,
                this._Taskreceivedate,
                this._Taskexpireddate,
                this._Getpointtime,
                this._Status,
                this._Remark,
                this._Createtime,
                this._Updatetime,
                this._Isenabled,
                this._Isdel,
                this._Clearcode,
                this._Clearmessage,
                this._Platformid};
        }
        #endregion

        #region _Field
        /// <summary>
        /// 字段信息
        /// </summary>
        public class _
        {
            /// <summary>
            /// tb_usertask 
            /// </summary>
            public readonly static Field All = new Field("*", m_tableName);
            /// <summary>
            /// Usertaskid 
            /// </summary>
            public readonly static Field Usertaskid = new Field("usertaskid", m_tableName, "usertaskid");
            /// <summary>
            /// Userid 
            /// </summary>
            public readonly static Field Userid = new Field("userid", m_tableName, "userid");
            /// <summary>
            /// Taskid 
            /// </summary>
            public readonly static Field Taskid = new Field("taskid", m_tableName, "taskid");
            /// <summary>
            /// Taskname 
            /// </summary>
            public readonly static Field Taskname = new Field("taskname", m_tableName, "taskname");
            /// <summary>
            /// Tasktype 
            /// </summary>
            public readonly static Field Tasktype = new Field("tasktype", m_tableName, "tasktype");
            /// <summary>
            /// Taskrewardtype 
            /// </summary>
            public readonly static Field Taskrewardtype = new Field("taskrewardtype", m_tableName, "taskrewardtype");
            /// <summary>
            /// Giftid 
            /// </summary>
            public readonly static Field Giftid = new Field("giftid", m_tableName, "giftid");
            /// <summary>
            /// Point 
            /// </summary>
            public readonly static Field Point = new Field("point", m_tableName, "point");
            /// <summary>
            /// Taskfinishtime 
            /// </summary>
            public readonly static Field Taskfinishtime = new Field("taskfinishtime", m_tableName, "taskfinishtime");
            /// <summary>
            /// Taskfinishdate 
            /// </summary>
            public readonly static Field Taskfinishdate = new Field("taskfinishdate", m_tableName, "taskfinishdate");
            /// <summary>
            /// Taskreceivedate 
            /// </summary>
            public readonly static Field Taskreceivedate = new Field("taskreceivedate", m_tableName, "taskreceivedate");
            /// <summary>
            /// Taskexpireddate 
            /// </summary>
            public readonly static Field Taskexpireddate = new Field("taskexpireddate", m_tableName, "taskexpireddate");
            /// <summary>
            /// Getpointtime 
            /// </summary>
            public readonly static Field Getpointtime = new Field("getpointtime", m_tableName, "getpointtime");
            /// <summary>
            /// Status 
            /// </summary>
            public readonly static Field Status = new Field("status", m_tableName, "status");
            /// <summary>
            /// Remark 
            /// </summary>
            public readonly static Field Remark = new Field("remark", m_tableName, "remark");
            /// <summary>
            /// Createtime 
            /// </summary>
            public readonly static Field Createtime = new Field("createtime", m_tableName, "createtime");
            /// <summary>
            /// Updatetime 
            /// </summary>
            public readonly static Field Updatetime = new Field("updatetime", m_tableName, "updatetime");
            /// <summary>
            /// Isenabled 
            /// </summary>
            public readonly static Field Isenabled = new Field("isenabled", m_tableName, "isenabled");
            /// <summary>
            /// Isdel 
            /// </summary>
            public readonly static Field Isdel = new Field("isdel", m_tableName, "isdel");
            /// <summary>
            /// Clearcode 
            /// </summary>
            public readonly static Field Clearcode = new Field("clearcode", m_tableName, "clearcode");
            /// <summary>
            /// Clearmessage 
            /// </summary>
            public readonly static Field Clearmessage = new Field("clearmessage", m_tableName, "clearmessage");
            /// <summary>
            /// Platformid 
            /// </summary>
            public readonly static Field Platformid = new Field("platformid", m_tableName, "platformid");
        }
        #endregion


    }
    /// <summary>
    /// 实体类DBUserTask操作类
    /// </summary>
    public partial class DBUserTaskRepository : BaseRepository<DBUserTask>
    {
        DBContext db;
        /// <summary>
        /// 当前实体查询上下文
        /// </summary>
        public Search<DBUserTask> Search(string tableName = "")
        {
            if (string.IsNullOrEmpty(tableName))
            {
                tableName = "tb_usertask";
            }
            return db.Search<DBUserTask>(tableName);
        }
        /// <summary>
        /// 当前实体查询上下文
        /// </summary>
        public Search<DBUserTask> Search(DBUserTask entity)
        {
            return db.Search<DBUserTask>(entity);
        }
        /// <summary>
        /// 构造方法
        /// </summary>
        public DBUserTaskRepository()
        {
            db = new DBContext();
        }
        /// <summary>
        /// 构造方法
        /// </summary>
        public DBUserTaskRepository(DBContext dbContext)
        {
            db = dbContext;
        }
        /// <summary>
        /// 构造方法
        /// <param name="connStrName">连接字符串中的名称</param>
        /// </summary>
        public DBUserTaskRepository(string connStrName)
        {
            db = new DBContext(connStrName);
        }
        /// <summary>
        /// 构造方法
        /// <param name="dbType">数据库类型</param>
        /// <param name="connStr">连接字符串</param>
        /// </summary>
        public DBUserTaskRepository(DatabaseType dbType, string connStr)
        {
            db = new DBContext(dbType, connStr);
        }
        /// <summary>
        /// 当前db操作上下文
        /// </summary>
        public DBContext DBContext
        {
            get
            {
                return db;
            }
        }
        /// <summary>
        /// 获取实体
        /// <param name="pageIndex">分页第几页</param>
        /// <param name="pageSize">分页一页取值</param>
        /// </summary>
        public DBUserTask GetDBUserTask(string Usertaskid)
        {
            return Search().Where(b => b.Usertaskid == Usertaskid).First();
        }
        /// <summary>
        /// 获取列表
        /// <param name="pageIndex">分页第几页</param>
        /// <param name="pageSize">分页一页取值</param>
        /// </summary>
        public List<DBUserTask> GetList(int pageIndex, int pageSize)
        {
            return this.Search().Page(pageIndex, pageSize).ToList();
        }
        /// <summary>
        /// 获取列表
        /// <param name="tableName">表名</param>
        /// <param name="pageIndex">分页第几页</param>
        /// <param name="pageSize">分页一页取值</param>
        /// </summary>
        public List<DBUserTask> GetList(string tableName, int pageIndex = 1, int pageSize = 12)
        {
            return this.Search(tableName).Page(pageIndex, pageSize).ToList();
        }
        /// <summary>
        /// 添加实体
        /// <param name="obj">传进的实体</param>
        /// </summary>
        public int Insert(DBUserTask obj)
        {
            return db.Insert(obj);
        }
        /// <summary>
        /// 更新实体
        /// <param name="obj">传进的实体</param>
        /// </summary>
        public int Update(DBUserTask obj)
        {
            return db.Update(obj);
        }
        /// <summary>
        /// 删除实体
        /// <param name="obj">传进的实体</param>
        /// </summary>
        public int Delete(DBUserTask obj)
        {
            return db.Delete(obj);
        }
        /// <summary>
        /// 删除实体
        /// <param name="Usertaskid">Usertaskid</param>
        /// </summary>
        public int Delete(string Usertaskid)
        {
            var obj = Search().Where(b => b.Usertaskid == Usertaskid).First();
            if (obj == null) return -1;
            return db.Delete(obj);
        }
        /// <summary>
        /// 批量删除实体
        /// <param name="obj">传进的实体列表</param>
        /// </summary>
        public int Deletes(List<DBUserTask> objs)
        {
            return db.Delete<DBUserTask>(objs);
        }
        /// <summary>
        /// 执行sql语句
        /// <param name="sql"></param>
        /// </summary>
        public SqlSection FromSql(string sql)
        {
            return db.FromSql(sql);
        }
        /// <summary>
        /// 执行存储过程
        /// <param name="sql"></param>
        /// </summary>
        public ProcSection FromProc(string procName)
        {
            return db.FromProc(procName);
        }

        public int Deletes(IEnumerable<DBUserTask> objs)
        {
            throw new NotImplementedException();
        }
    }

}

