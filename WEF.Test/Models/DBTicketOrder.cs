//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由WEF数据库工具, Version=3.8.6.6, Culture=neutral, PublicKeyToken=null生成;时间 2020-05-29 20:42:31.137
//     运行时版本:4.0.30319.42000
//     不建议手动更改此代码，如有需要请自行扩展partial类
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Runtime.Serialization;
using WEF.Common;
using WEF.Section;

namespace WEF.Models
{

    /// <summary>
    /// 实体类DBTicketOrder
    /// </summary>
    [Serializable, DataContract, Table("tb_ticketorder")]
    public partial class DBTicketOrder : Entity
    {
        private static string m_tableName;
        public DBTicketOrder() : base("tb_ticketorder") { m_tableName = "tb_ticketorder"; }
        public DBTicketOrder(string tableName) : base(tableName) { m_tableName = tableName; }

        #region Model
        private string _C_id;
        private int _C_supplier;
        private string _C_appId;
        private string _C_channelId;
        private string _C_sku;
        private string _C_outTradeNo;
        private int _C_count;
        private string _C_phone;
        private string _C_nonce;
        private string _C_timestamp;
        private string _C_sign;
        private decimal _C_price;
        private decimal _C_amount;
        private float _C_discountrate;
        private string _C_activityName;
        private string _C_productName;
        private string _C_bcTradeNo;
        private string _C_resv1;
        private string _C_resv2;
        private string _C_resv3;
        private string _C_resv4;
        private string _C_resv5;
        private string _C_code;
        private DateTime _C_created;
        private DateTime? _C_updated;
        /// <summary>
        /// C_id 
        /// </summary>
        [DataMember]
        public string C_id
        {
            get { return _C_id; }
            set
            {
                this.OnPropertyValueChange(_.C_id, _C_id, value);
                this._C_id = value;
            }
        }
        /// <summary>
        /// C_supplier 
        /// </summary>
        [DataMember]
        public int C_supplier
        {
            get { return _C_supplier; }
            set
            {
                this.OnPropertyValueChange(_.C_supplier, _C_supplier, value);
                this._C_supplier = value;
            }
        }
        /// <summary>
        /// C_appId 
        /// </summary>
        [DataMember]
        public string C_appId
        {
            get { return _C_appId; }
            set
            {
                this.OnPropertyValueChange(_.C_appId, _C_appId, value);
                this._C_appId = value;
            }
        }
        /// <summary>
        /// C_channelId 
        /// </summary>
        [DataMember]
        public string C_channelId
        {
            get { return _C_channelId; }
            set
            {
                this.OnPropertyValueChange(_.C_channelId, _C_channelId, value);
                this._C_channelId = value;
            }
        }
        /// <summary>
        /// C_sku 
        /// </summary>
        [DataMember]
        public string C_sku
        {
            get { return _C_sku; }
            set
            {
                this.OnPropertyValueChange(_.C_sku, _C_sku, value);
                this._C_sku = value;
            }
        }
        /// <summary>
        /// C_outTradeNo 
        /// </summary>
        [DataMember]
        public string C_outTradeNo
        {
            get { return _C_outTradeNo; }
            set
            {
                this.OnPropertyValueChange(_.C_outTradeNo, _C_outTradeNo, value);
                this._C_outTradeNo = value;
            }
        }
        /// <summary>
        /// C_count 
        /// </summary>
        [DataMember]
        public int C_count
        {
            get { return _C_count; }
            set
            {
                this.OnPropertyValueChange(_.C_count, _C_count, value);
                this._C_count = value;
            }
        }
        /// <summary>
        /// C_phone 
        /// </summary>
        [DataMember]
        public string C_phone
        {
            get { return _C_phone; }
            set
            {
                this.OnPropertyValueChange(_.C_phone, _C_phone, value);
                this._C_phone = value;
            }
        }
        /// <summary>
        /// C_nonce 
        /// </summary>
        [DataMember]
        public string C_nonce
        {
            get { return _C_nonce; }
            set
            {
                this.OnPropertyValueChange(_.C_nonce, _C_nonce, value);
                this._C_nonce = value;
            }
        }
        /// <summary>
        /// C_timestamp 
        /// </summary>
        [DataMember]
        public string C_timestamp
        {
            get { return _C_timestamp; }
            set
            {
                this.OnPropertyValueChange(_.C_timestamp, _C_timestamp, value);
                this._C_timestamp = value;
            }
        }
        /// <summary>
        /// C_sign 
        /// </summary>
        [DataMember]
        public string C_sign
        {
            get { return _C_sign; }
            set
            {
                this.OnPropertyValueChange(_.C_sign, _C_sign, value);
                this._C_sign = value;
            }
        }
        /// <summary>
        /// C_price 
        /// </summary>
        [DataMember]
        public decimal C_price
        {
            get { return _C_price; }
            set
            {
                this.OnPropertyValueChange(_.C_price, _C_price, value);
                this._C_price = value;
            }
        }
        /// <summary>
        /// C_amount 
        /// </summary>
        [DataMember]
        public decimal C_amount
        {
            get { return _C_amount; }
            set
            {
                this.OnPropertyValueChange(_.C_amount, _C_amount, value);
                this._C_amount = value;
            }
        }
        /// <summary>
        /// C_discountrate 
        /// </summary>
        [DataMember]
        public float C_discountrate
        {
            get { return _C_discountrate; }
            set
            {
                this.OnPropertyValueChange(_.C_discountrate, _C_discountrate, value);
                this._C_discountrate = value;
            }
        }
        /// <summary>
        /// C_activityName 
        /// </summary>
        [DataMember]
        public string C_activityName
        {
            get { return _C_activityName; }
            set
            {
                this.OnPropertyValueChange(_.C_activityName, _C_activityName, value);
                this._C_activityName = value;
            }
        }
        /// <summary>
        /// C_productName 
        /// </summary>
        [DataMember]
        public string C_productName
        {
            get { return _C_productName; }
            set
            {
                this.OnPropertyValueChange(_.C_productName, _C_productName, value);
                this._C_productName = value;
            }
        }
        /// <summary>
        /// C_bcTradeNo 
        /// </summary>
        [DataMember]
        public string C_bcTradeNo
        {
            get { return _C_bcTradeNo; }
            set
            {
                this.OnPropertyValueChange(_.C_bcTradeNo, _C_bcTradeNo, value);
                this._C_bcTradeNo = value;
            }
        }
        /// <summary>
        /// C_resv1 
        /// </summary>
        [DataMember]
        public string C_resv1
        {
            get { return _C_resv1; }
            set
            {
                this.OnPropertyValueChange(_.C_resv1, _C_resv1, value);
                this._C_resv1 = value;
            }
        }
        /// <summary>
        /// C_resv2 
        /// </summary>
        [DataMember]
        public string C_resv2
        {
            get { return _C_resv2; }
            set
            {
                this.OnPropertyValueChange(_.C_resv2, _C_resv2, value);
                this._C_resv2 = value;
            }
        }
        /// <summary>
        /// C_resv3 
        /// </summary>
        [DataMember]
        public string C_resv3
        {
            get { return _C_resv3; }
            set
            {
                this.OnPropertyValueChange(_.C_resv3, _C_resv3, value);
                this._C_resv3 = value;
            }
        }
        /// <summary>
        /// C_resv4 
        /// </summary>
        [DataMember]
        public string C_resv4
        {
            get { return _C_resv4; }
            set
            {
                this.OnPropertyValueChange(_.C_resv4, _C_resv4, value);
                this._C_resv4 = value;
            }
        }
        /// <summary>
        /// C_resv5 
        /// </summary>
        [DataMember]
        public string C_resv5
        {
            get { return _C_resv5; }
            set
            {
                this.OnPropertyValueChange(_.C_resv5, _C_resv5, value);
                this._C_resv5 = value;
            }
        }
        /// <summary>
        /// C_code 
        /// </summary>
        [DataMember]
        public string C_code
        {
            get { return _C_code; }
            set
            {
                this.OnPropertyValueChange(_.C_code, _C_code, value);
                this._C_code = value;
            }
        }
        /// <summary>
        /// C_created 
        /// </summary>
        [DataMember]
        public DateTime C_created
        {
            get { return _C_created; }
            set
            {
                this.OnPropertyValueChange(_.C_created, _C_created, value);
                this._C_created = value;
            }
        }
        /// <summary>
        /// C_updated 
        /// </summary>
        [DataMember]
        public DateTime? C_updated
        {
            get { return _C_updated; }
            set
            {
                this.OnPropertyValueChange(_.C_updated, _C_updated, value);
                this._C_updated = value;
            }
        }
        #endregion

        #region Method
        /// <summary>
        /// 获取实体中的主键列
        /// </summary>
        public override Field[] GetPrimaryKeyFields()
        {
            return new Field[] {
                _.C_id};
        }
        /// <summary>
        /// 获取列信息
        /// </summary>
        public override Field[] GetFields()
        {
            return new Field[] {
                _.C_id,
                _.C_supplier,
                _.C_appId,
                _.C_channelId,
                _.C_sku,
                _.C_outTradeNo,
                _.C_count,
                _.C_phone,
                _.C_nonce,
                _.C_timestamp,
                _.C_sign,
                _.C_price,
                _.C_amount,
                _.C_discountrate,
                _.C_activityName,
                _.C_productName,
                _.C_bcTradeNo,
                _.C_resv1,
                _.C_resv2,
                _.C_resv3,
                _.C_resv4,
                _.C_resv5,
                _.C_code,
                _.C_created,
                _.C_updated};
        }
        /// <summary>
        /// 获取值信息
        /// </summary>
        public override object[] GetValues()
        {
            return new object[] {
                this._C_id,
                this._C_supplier,
                this._C_appId,
                this._C_channelId,
                this._C_sku,
                this._C_outTradeNo,
                this._C_count,
                this._C_phone,
                this._C_nonce,
                this._C_timestamp,
                this._C_sign,
                this._C_price,
                this._C_amount,
                this._C_discountrate,
                this._C_activityName,
                this._C_productName,
                this._C_bcTradeNo,
                this._C_resv1,
                this._C_resv2,
                this._C_resv3,
                this._C_resv4,
                this._C_resv5,
                this._C_code,
                this._C_created,
                this._C_updated};
        }
        #endregion

        #region _Field
        /// <summary>
        /// 字段信息
        /// </summary>
        public class _
        {
            /// <summary>
            /// tb_ticketorder 
            /// </summary>
            public readonly static Field All = new Field("*", m_tableName);
            /// <summary>
            /// C_id 
            /// </summary>
            public readonly static Field C_id = new Field("c_id", m_tableName, "c_id");
            /// <summary>
            /// C_supplier 
            /// </summary>
            public readonly static Field C_supplier = new Field("c_supplier", m_tableName, "c_supplier");
            /// <summary>
            /// C_appId 
            /// </summary>
            public readonly static Field C_appId = new Field("c_appId", m_tableName, "c_appId");
            /// <summary>
            /// C_channelId 
            /// </summary>
            public readonly static Field C_channelId = new Field("c_channelId", m_tableName, "c_channelId");
            /// <summary>
            /// C_sku 
            /// </summary>
            public readonly static Field C_sku = new Field("c_sku", m_tableName, "c_sku");
            /// <summary>
            /// C_outTradeNo 
            /// </summary>
            public readonly static Field C_outTradeNo = new Field("c_outTradeNo", m_tableName, "c_outTradeNo");
            /// <summary>
            /// C_count 
            /// </summary>
            public readonly static Field C_count = new Field("c_count", m_tableName, "c_count");
            /// <summary>
            /// C_phone 
            /// </summary>
            public readonly static Field C_phone = new Field("c_phone", m_tableName, "c_phone");
            /// <summary>
            /// C_nonce 
            /// </summary>
            public readonly static Field C_nonce = new Field("c_nonce", m_tableName, "c_nonce");
            /// <summary>
            /// C_timestamp 
            /// </summary>
            public readonly static Field C_timestamp = new Field("c_timestamp", m_tableName, "c_timestamp");
            /// <summary>
            /// C_sign 
            /// </summary>
            public readonly static Field C_sign = new Field("c_sign", m_tableName, "c_sign");
            /// <summary>
            /// C_price 
            /// </summary>
            public readonly static Field C_price = new Field("c_price", m_tableName, "c_price");
            /// <summary>
            /// C_amount 
            /// </summary>
            public readonly static Field C_amount = new Field("c_amount", m_tableName, "c_amount");
            /// <summary>
            /// C_discountrate 
            /// </summary>
            public readonly static Field C_discountrate = new Field("c_discountrate", m_tableName, "c_discountrate");
            /// <summary>
            /// C_activityName 
            /// </summary>
            public readonly static Field C_activityName = new Field("c_activityName", m_tableName, "c_activityName");
            /// <summary>
            /// C_productName 
            /// </summary>
            public readonly static Field C_productName = new Field("c_productName", m_tableName, "c_productName");
            /// <summary>
            /// C_bcTradeNo 
            /// </summary>
            public readonly static Field C_bcTradeNo = new Field("c_bcTradeNo", m_tableName, "c_bcTradeNo");
            /// <summary>
            /// C_resv1 
            /// </summary>
            public readonly static Field C_resv1 = new Field("c_resv1", m_tableName, "c_resv1");
            /// <summary>
            /// C_resv2 
            /// </summary>
            public readonly static Field C_resv2 = new Field("c_resv2", m_tableName, "c_resv2");
            /// <summary>
            /// C_resv3 
            /// </summary>
            public readonly static Field C_resv3 = new Field("c_resv3", m_tableName, "c_resv3");
            /// <summary>
            /// C_resv4 
            /// </summary>
            public readonly static Field C_resv4 = new Field("c_resv4", m_tableName, "c_resv4");
            /// <summary>
            /// C_resv5 
            /// </summary>
            public readonly static Field C_resv5 = new Field("c_resv5", m_tableName, "c_resv5");
            /// <summary>
            /// C_code 
            /// </summary>
            public readonly static Field C_code = new Field("c_code", m_tableName, "c_code");
            /// <summary>
            /// C_created 
            /// </summary>
            public readonly static Field C_created = new Field("c_created", m_tableName, "c_created");
            /// <summary>
            /// C_updated 
            /// </summary>
            public readonly static Field C_updated = new Field("c_updated", m_tableName, "c_updated");
        }
        #endregion


    }
    /// <summary>
    /// 实体类DBTicketOrder操作类
    /// </summary>
    public partial class DBTicketOrderRepository : IRepository<DBTicketOrder>
    {
        DBContext db;
        /// <summary>
        /// 当前实体查询上下文
        /// </summary>
        public ISearch<DBTicketOrder> Search(string tableName = "")
        {
            if (string.IsNullOrEmpty(tableName))
            {
                tableName = "tb_ticketorder";
            }
            return db.Search<DBTicketOrder>(tableName);
        }
        /// <summary>
        /// 当前实体查询上下文
        /// </summary>
        public ISearch<DBTicketOrder> Search(DBTicketOrder entity)
        {
            return db.Search<DBTicketOrder>(entity);
        }
        /// <summary>
        /// 构造方法
        /// </summary>
        public DBTicketOrderRepository()
        {
            db = new DBContext();
        }
        /// <summary>
        /// 构造方法
        /// </summary>
        public DBTicketOrderRepository(DBContext dbContext)
        {
            db = dbContext;
        }
        /// <summary>
        /// 构造方法
        /// <param name="connStrName">连接字符串中的名称</param>
        /// </summary>
        public DBTicketOrderRepository(string connStrName)
        {
            db = new DBContext(connStrName);
        }
        /// <summary>
        /// 构造方法
        /// <param name="dbType">数据库类型</param>
        /// <param name="connStr">连接字符串</param>
        /// </summary>
        public DBTicketOrderRepository(DatabaseType dbType, string connStr)
        {
            db = new DBContext(dbType, connStr);
        }
        /// <summary>
        /// 当前db操作上下文
        /// </summary>
        public DBContext DBContext
        {
            get
            {
                return db;
            }
        }
        /// <summary>
        /// 获取实体
        /// <param name="pageIndex">分页第几页</param>
        /// <param name="pageSize">分页一页取值</param>
        /// </summary>
        public DBTicketOrder GetDBTicketOrder(string C_id)
        {
            return Search().Where(b => b.C_id == C_id).First();
        }
        /// <summary>
        /// 获取列表
        /// <param name="pageIndex">分页第几页</param>
        /// <param name="pageSize">分页一页取值</param>
        /// </summary>
        public List<DBTicketOrder> GetList(int pageIndex, int pageSize)
        {
            return this.Search().Page(pageIndex, pageSize).ToList();
        }
        /// <summary>
        /// 获取列表
        /// <param name="tableName">表名</param>
        /// <param name="pageIndex">分页第几页</param>
        /// <param name="pageSize">分页一页取值</param>
        /// </summary>
        public List<DBTicketOrder> GetList(string tableName, int pageIndex = 1, int pageSize = 12)
        {
            return this.Search(tableName).Page(pageIndex, pageSize).ToList();
        }
        /// <summary>
        /// 添加实体
        /// <param name="entity">传进的实体</param>
        /// </summary>
        public int Insert(DBTicketOrder entity)
        {
            return db.Insert(entity);
        }
        /// <summary>
        /// 更新实体
        /// <param name="entity">传进的实体</param>
        /// </summary>
        public int Update(DBTicketOrder entity)
        {
            return db.Update(entity);
        }
        /// <summary>
        /// 删除实体
        /// <param name="entity">传进的实体</param>
        /// </summary>
        public int Delete(DBTicketOrder entity)
        {
            return db.Delete(entity);
        }
        /// <summary>
        /// 删除实体
        /// <param name="C_id">C_id</param>
        /// </summary>
        public int Delete(string C_id)
        {
            var entity = Search().Where(b => b.C_id == C_id).First();
            if (entity == null) return -1;
            entity.Attach(EntityState.Deleted);
            return db.Save(entity);
        }
        /// <summary>
        /// 批量删除实体
        /// <param name="obj">传进的实体列表</param>
        /// </summary>
        public int Deletes(List<DBTicketOrder> entities)
        {
            return db.Delete<DBTicketOrder>(entities);
        }
        /// <summary>
        /// 持久化实体
        /// <param name="entity">传进的实体</param>
        /// </summary>
        public int Save(DBTicketOrder entity)
        {
            return db.Save<DBTicketOrder>(entity);
        }
        /// <summary>
        /// 批量持久化实体
        /// <param name="entities">传进的实体列表</param>
        /// </summary>
        public int Save(List<DBTicketOrder> entities)
        {
            return db.Save<DBTicketOrder>(entities);
        }
        /// <summary>
        /// 持久化实体
        /// <param name="tran">事务</param>
        /// <param name="entity">传进的实体</param>
        /// </summary>
        public int Save(DbTransaction tran, DBTicketOrder entity)
        {
            return db.Save<DBTicketOrder>(tran, entity);
        }
        /// <summary>
        /// 批量持久化实体
        /// <param name="tran">事务</param>
        /// <param name="entity">传进的实体列表</param>
        /// </summary>
        public int Save(DbTransaction tran, List<DBTicketOrder> entities)
        {
            return db.Save<DBTicketOrder>(tran, entities);
        }
        /// <summary>
        /// 执行sql语句
        /// <param name="sql"></param>
        /// </summary>
        public SqlSection ExecuteSQL(string sql)
        {
            return db.FromSql(sql);
        }
        /// <summary>
        /// 执行存储过程
        /// <param name="sql"></param>
        /// </summary>
        public ProcSection ExcuteProc(string procName)
        {
            return db.FromProc(procName);
        }
    }

}

