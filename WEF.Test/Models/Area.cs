//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由WEF.ModelGenerator, Version=3.0.0.0, Culture=neutral, PublicKeyToken=null生成;时间 2017-03-02 14:25:16.622
//     运行时版本:4.0.30319.42000
//     不建议手动更改此代码，如有需要请自行扩展partial类
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Runtime.Serialization;
using WEF;
using WEF.Common;
using WEF.Section;
using System.Collections.Generic;

namespace WEF.Models
{

    /// <summary>
    /// 实体类Area
    /// </summary>
    [Serializable, DataContract]
    public partial class Area : Entity
    {
        private static string m_tableName;
        public Area() : base("Area") { m_tableName = "Area"; }
        public Area(string tableName) : base(tableName) { m_tableName = tableName; }

        #region Model
        private int _ID;
        private int? _Sort;
        private int? _CreateUserID;
        private int? _LastUpdateUserID;
        private DateTime? _CreateDate;
        private DateTime? _LastUpdateDate;
        private bool _IsDeleted;
        private string _CName;
        private string _EName;
        private int? _ParentID;
        private int? _Depth;
        /// <summary>
        /// ID 
        /// </summary>
        [DataMember]
        public int ID
        {
            get { return _ID; }
            set
            {
                this.OnPropertyValueChange(_.ID, _ID, value);
                this._ID = value;
            }
        }
        /// <summary>
        /// Sort 
        /// </summary>
        [DataMember]
        public int? Sort
        {
            get { return _Sort; }
            set
            {
                this.OnPropertyValueChange(_.Sort, _Sort, value);
                this._Sort = value;
            }
        }
        /// <summary>
        /// CreateUserID 
        /// </summary>
        [DataMember]
        public int? CreateUserID
        {
            get { return _CreateUserID; }
            set
            {
                this.OnPropertyValueChange(_.CreateUserID, _CreateUserID, value);
                this._CreateUserID = value;
            }
        }
        /// <summary>
        /// LastUpdateUserID 
        /// </summary>
        [DataMember]
        public int? LastUpdateUserID
        {
            get { return _LastUpdateUserID; }
            set
            {
                this.OnPropertyValueChange(_.LastUpdateUserID, _LastUpdateUserID, value);
                this._LastUpdateUserID = value;
            }
        }
        /// <summary>
        /// CreateDate 
        /// </summary>
        [DataMember]
        public DateTime? CreateDate
        {
            get { return _CreateDate; }
            set
            {
                this.OnPropertyValueChange(_.CreateDate, _CreateDate, value);
                this._CreateDate = value;
            }
        }
        /// <summary>
        /// LastUpdateDate 
        /// </summary>
        [DataMember]
        public DateTime? LastUpdateDate
        {
            get { return _LastUpdateDate; }
            set
            {
                this.OnPropertyValueChange(_.LastUpdateDate, _LastUpdateDate, value);
                this._LastUpdateDate = value;
            }
        }
        /// <summary>
        /// IsDeleted 
        /// </summary>
        [DataMember]
        public bool IsDeleted
        {
            get { return _IsDeleted; }
            set
            {
                this.OnPropertyValueChange(_.IsDeleted, _IsDeleted, value);
                this._IsDeleted = value;
            }
        }
        /// <summary>
        /// CName 
        /// </summary>
        [DataMember]
        public string CName
        {
            get { return _CName; }
            set
            {
                this.OnPropertyValueChange(_.CName, _CName, value);
                this._CName = value;
            }
        }
        /// <summary>
        /// EName 
        /// </summary>
        [DataMember]
        public string EName
        {
            get { return _EName; }
            set
            {
                this.OnPropertyValueChange(_.EName, _EName, value);
                this._EName = value;
            }
        }
        /// <summary>
        /// ParentID 
        /// </summary>
        [DataMember]
        public int? ParentID
        {
            get { return _ParentID; }
            set
            {
                this.OnPropertyValueChange(_.ParentID, _ParentID, value);
                this._ParentID = value;
            }
        }
        /// <summary>
        /// Depth 
        /// </summary>
        [DataMember]
        public int? Depth
        {
            get { return _Depth; }
            set
            {
                this.OnPropertyValueChange(_.Depth, _Depth, value);
                this._Depth = value;
            }
        }
        #endregion

        #region Method
        /// <summary>
        /// 获取实体中的标识列
        /// </summary>
        public override Field GetIdentityField()
        {
            return _.ID;
        }
        /// <summary>
        /// 获取实体中的主键列
        /// </summary>
        public override Field[] GetPrimaryKeyFields()
        {
            return new Field[] {
				_.ID};
        }
        /// <summary>
        /// 获取列信息
        /// </summary>
        public override Field[] GetFields()
        {
            return new Field[] {
				_.ID,
				_.Sort,
				_.CreateUserID,
				_.LastUpdateUserID,
				_.CreateDate,
				_.LastUpdateDate,
				_.IsDeleted,
				_.CName,
				_.EName,
				_.ParentID,
				_.Depth};
        }
        /// <summary>
        /// 获取值信息
        /// </summary>
        public override object[] GetValues()
        {
            return new object[] {
				this._ID,
				this._Sort,
				this._CreateUserID,
				this._LastUpdateUserID,
				this._CreateDate,
				this._LastUpdateDate,
				this._IsDeleted,
				this._CName,
				this._EName,
				this._ParentID,
				this._Depth};
        }
        #endregion

        #region _Field
        /// <summary>
        /// 字段信息
        /// </summary>
        public class _
        {
            /// <summary>
            /// Area 
            /// </summary>
            public readonly static Field All = new Field("*", m_tableName);
            /// <summary>
            /// ID 
            /// </summary>
            public readonly static Field ID = new Field("ID", m_tableName, "ID");
            /// <summary>
            /// Sort 
            /// </summary>
            public readonly static Field Sort = new Field("Sort", m_tableName, "Sort");
            /// <summary>
            /// CreateUserID 
            /// </summary>
            public readonly static Field CreateUserID = new Field("CreateUserID", m_tableName, "CreateUserID");
            /// <summary>
            /// LastUpdateUserID 
            /// </summary>
            public readonly static Field LastUpdateUserID = new Field("LastUpdateUserID", m_tableName, "LastUpdateUserID");
            /// <summary>
            /// CreateDate 
            /// </summary>
            public readonly static Field CreateDate = new Field("CreateDate", m_tableName, "CreateDate");
            /// <summary>
            /// LastUpdateDate 
            /// </summary>
            public readonly static Field LastUpdateDate = new Field("LastUpdateDate", m_tableName, "LastUpdateDate");
            /// <summary>
            /// IsDeleted 
            /// </summary>
            public readonly static Field IsDeleted = new Field("IsDeleted", m_tableName, "IsDeleted");
            /// <summary>
            /// CName 
            /// </summary>
            public readonly static Field CName = new Field("CName", m_tableName, "CName");
            /// <summary>
            /// EName 
            /// </summary>
            public readonly static Field EName = new Field("EName", m_tableName, "EName");
            /// <summary>
            /// ParentID 
            /// </summary>
            public readonly static Field ParentID = new Field("ParentID", m_tableName, "ParentID");
            /// <summary>
            /// Depth 
            /// </summary>
            public readonly static Field Depth = new Field("Depth", m_tableName, "Depth");
        }
        #endregion


    }
    /// <summary>
    /// 实体类Area操作类
    /// </summary>
    public partial class AreaRepository
    {
        DBContext db;

        ISearch<Area> fromSection;

        /// <summary>
        /// 当前实体查询上下文
        /// </summary>
        public ISearch<Area> GetSelectContext(string tableName = "")
        {
            if (string.IsNullOrEmpty(tableName))
            {
                tableName = "Area";
            }
            return db.Search<Area>(tableName);
        }
        /// <summary>
        /// 构造方法
        /// </summary>
        public AreaRepository()
        {
            db = new DBContext();
            fromSection = db.Search<Area>();
        }
        /// <summary>
        /// 构造方法
        /// <param name="connStrName">连接字符串中的名称</param>
        /// </summary>
        public AreaRepository(string connStrName)
        {
            db = new DBContext(connStrName);
        }
        /// <summary>
        /// 获取列表
        /// <param name="pageIndex">分页第几页</param>
        /// <param name="pageSize">分页一页取值</param>
        /// </summary>
        public List<Area> GetList(int pageIndex, int pageSize)
        {
            return this.GetSelectContext().Page(pageIndex, pageSize).ToList();
        }
        /// <summary>
        /// 获取列表
        /// <param name="tableName">表名</param>
        /// <param name="pageIndex">分页第几页</param>
        /// <param name="pageSize">分页一页取值</param>
        /// </summary>
        public List<Area> GetList(string tableName, int pageIndex = 1, int pageSize = 12)
        {
            return this.GetSelectContext(tableName).Page(pageIndex, pageSize).ToList();
        }
        /// <summary>
        /// 添加实体
        /// <param name="obj">传进的实体</param>
        /// </summary>
        public int Insert(Area obj)
        {
            return db.Insert(obj);
        }
        /// <summary>
        /// 更新实体
        /// <param name="obj">传进的实体</param>
        /// </summary>
        public int Update(Area obj)
        {
            return db.Update(obj);
        }
        /// <summary>
        /// 删除实体
        /// <param name="obj">传进的实体</param>
        /// </summary>
        public int Delete(Area obj)
        {
            return db.Delete(obj);
        }
        /// <summary>
        /// 执行sql语句
        /// <param name="sql"></param>
        /// </summary>
        public SqlSection ExecuteSQL(string sql)
        {
            return db.FromSql(sql);
        }
        /// <summary>
        /// 执行存储过程
        /// <param name="sql"></param>
        /// </summary>
        public ProcSection ExcuteProc(string procName)
        {
            return db.FromProc(procName);
        }
    }

}

