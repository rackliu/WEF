//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由WEF数据库工具, Version=4.3.1.5, Culture=neutral, PublicKeyToken=null生成;时间 2020-09-08 14:18:04.558
//     运行时版本:4.0.30319.42000
//     不建议手动更改此代码，如有需要请自行扩展partial类
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Runtime.Serialization;
using System.Linq.Expressions;
using WEF;
using WEF.Common;
using WEF.Section;
using WEF.MvcPager;

namespace WEF.Test.Models
{

    /// <summary>
    /// 实体类Rule
    /// </summary>
    [Serializable, DataContract, Table("rules")]
    public partial class Rule : Entity
    {
        private static string m_tableName;
        public Rule() : base("rules") { m_tableName = "rules"; }
        public Rule(string tableName) : base(tableName) { m_tableName = tableName; }

        #region Model
        private int _Id;
        private string _Name;
        private int _RuleType;
        private string _Json;
        private int? _Score;
        private bool? _Enabled;
        private DateTime _Created;
        private DateTime _Updated;
        /// <summary>
        /// Id auto_increment
        /// </summary>
        [DataMember]
        public int Id
        {
            get { return _Id; }
            set
            {
                this.OnPropertyValueChange(_.Id, _Id, value);
                this._Id = value;
            }
        }
        /// <summary>
        /// Name 
        /// </summary>
        [DataMember]
        public string Name
        {
            get { return _Name; }
            set
            {
                this.OnPropertyValueChange(_.Name, _Name, value);
                this._Name = value;
            }
        }
        /// <summary>
        /// RuleType 
        /// </summary>
        [DataMember]
        public int RuleType
        {
            get { return _RuleType; }
            set
            {
                this.OnPropertyValueChange(_.RuleType, _RuleType, value);
                this._RuleType = value;
            }
        }
        /// <summary>
        /// Json 
        /// </summary>
        [DataMember]
        public string Json
        {
            get { return _Json; }
            set
            {
                this.OnPropertyValueChange(_.Json, _Json, value);
                this._Json = value;
            }
        }
        /// <summary>
        /// Score 
        /// </summary>
        [DataMember]
        public int? Score
        {
            get { return _Score; }
            set
            {
                this.OnPropertyValueChange(_.Score, _Score, value);
                this._Score = value;
            }
        }
        /// <summary>
        /// Enabled 
        /// </summary>
        [DataMember]
        public bool? Enabled
        {
            get { return _Enabled; }
            set
            {
                this.OnPropertyValueChange(_.Enabled, _Enabled, value);
                this._Enabled = value;
            }
        }
        /// <summary>
        /// Created 
        /// </summary>
        [DataMember]
        public DateTime Created
        {
            get { return _Created; }
            set
            {
                this.OnPropertyValueChange(_.Created, _Created, value);
                this._Created = value;
            }
        }
        /// <summary>
        /// Updated 
        /// </summary>
        [DataMember]
        public DateTime Updated
        {
            get { return _Updated; }
            set
            {
                this.OnPropertyValueChange(_.Updated, _Updated, value);
                this._Updated = value;
            }
        }
        #endregion

        #region Method
        /// <summary>
        /// 获取实体中的标识列
        /// </summary>
        public override Field GetIdentityField()
        {
            return _.Id;
        }
        /// <summary>
        /// 获取实体中的主键列
        /// </summary>
        public override Field[] GetPrimaryKeyFields()
        {
            return new Field[] {
                _.Id};
        }
        /// <summary>
        /// 获取列信息
        /// </summary>
        public override Field[] GetFields()
        {
            return new Field[] {
                _.Id,
                _.Name,
                _.RuleType,
                _.Json,
                _.Score,
                _.Enabled,
                _.Created,
                _.Updated};
        }
        /// <summary>
        /// 获取值信息
        /// </summary>
        public override object[] GetValues()
        {
            return new object[] {
                this._Id,
                this._Name,
                this._RuleType,
                this._Json,
                this._Score,
                this._Enabled,
                this._Created,
                this._Updated};
        }
        #endregion

        #region _Field
        /// <summary>
        /// 字段信息
        /// </summary>
        public class _
        {
            /// <summary>
            /// rules 
            /// </summary>
            public readonly static Field All = new Field("*", m_tableName);
            /// <summary>
            /// Id auto_increment
            /// </summary>
            public readonly static Field Id = new Field("id", m_tableName, "auto_increment");
            /// <summary>
            /// Name 
            /// </summary>
            public readonly static Field Name = new Field("name", m_tableName, "name");
            /// <summary>
            /// RuleType 
            /// </summary>
            public readonly static Field RuleType = new Field("ruleType", m_tableName, "ruleType");
            /// <summary>
            /// Json 
            /// </summary>
            public readonly static Field Json = new Field("json", m_tableName, "json");
            /// <summary>
            /// Score 
            /// </summary>
            public readonly static Field Score = new Field("score", m_tableName, "score");
            /// <summary>
            /// Enabled 
            /// </summary>
            public readonly static Field Enabled = new Field("enabled", m_tableName, "enabled");
            /// <summary>
            /// Created 
            /// </summary>
            public readonly static Field Created = new Field("created", m_tableName, "created");
            /// <summary>
            /// Updated 
            /// </summary>
            public readonly static Field Updated = new Field("updated", m_tableName, "updated");
        }
        #endregion


    }
    /// <summary>
    /// 实体类Rule操作类
    /// </summary>
    public partial class RuleRepository : IRepository<Rule>
    {
        DBContext db;
        /// <summary>
        /// 构造方法
        /// </summary>
        public RuleRepository()
        {
            db = new DBContext();
        }
        /// <summary>
        /// 构造方法
        /// </summary>
        public RuleRepository(DBContext dbContext)
        {
            db = dbContext;
        }
        /// <summary>
        /// 构造方法
        /// <param name="connStrName">连接字符串中的名称</param>
        /// </summary>
        public RuleRepository(string connStrName)
        {
            db = new DBContext(connStrName);
        }
        /// <summary>
        /// 构造方法
        /// <param name="dbType">数据库类型</param>
        /// <param name="connStr">连接字符串</param>
        /// </summary>
        public RuleRepository(DatabaseType dbType, string connStr)
        {
            db = new DBContext(dbType, connStr);
        }
        /// <summary>
        /// 当前db操作上下文
        /// </summary>
        public DBContext DBContext
        {
            get
            {
                return db;
            }
        }
        /// <summary>
        /// 总数
        /// </summary>
        /// <returns></returns>
        public int Total
        {
            get
            {
                return Search().Count();
            }
        }
        /// <summary>
        /// 当前实体查询上下文
        /// </summary>
        public ISearch<Rule> Search(string tableName = "")
        {
            if (string.IsNullOrEmpty(tableName))
            {
                tableName = "rules";
            }
            return db.Search<Rule>(tableName);
        }
        /// <summary>
        /// 当前实体查询上下文
        /// </summary>
        public ISearch<Rule> Search(Rule entity)
        {
            return db.Search<Rule>(entity);
        }
        /// <summary>
        /// 获取实体
        /// <param name="Id">Id</param>
        /// <param name="tableName">表名</param>
        /// </summary>
        /// <returns></returns>
        public Rule GetRule(int Id, string tableName = "")
        {
            return Search(tableName).Where(b => b.Id == Id).First();
        }
        /// <summary>
        /// 获取列表
        /// <param name="pageIndex">分页第几页</param>
        /// <param name="pageSize">分页一页取值</param>
        /// </summary>
        /// <returns></returns>
        public List<Rule> GetList(int pageIndex, int pageSize)
        {
            return this.Search().Page(pageIndex, pageSize).ToList();
        }
        /// <summary>
        /// 获取列表
        /// <param name="tableName">表名</param>
        /// <param name="pageIndex">分页第几页</param>
        /// <param name="pageSize">分页一页取值</param>
        /// </summary>
        /// <returns></returns>
        public List<Rule> GetList(string tableName, int pageIndex = 1, int pageSize = 12)
        {
            return this.Search(tableName).Page(pageIndex, pageSize).ToList();
        }
        /// <summary>
        /// 分页查询
        /// <param name="lambdaWhere">查询表达式</param>
        /// <param name="pageIndex">分页第几页</param>
        /// <param name="pageSize">分页一页取值</param>
        /// <param name="orderBy">排序</param>
        /// <param name="asc">升降</param>
        /// </summary>
        /// <returns></returns>
        public PagedList<Rule> GetPagedList(Expression<Func<Rule, bool>> lambdaWhere, string tableName = "", int pageIndex = 1, int pageSize = 12, string orderBy = "Id", bool asc = true)
        {
            return this.Search(tableName).GetPagedList(lambdaWhere, pageIndex, pageSize, orderBy, asc);
        }
        /// <summary>
        /// 添加实体
        /// <param name="entity">传进的实体</param>
        /// </summary>
        public int Insert(Rule entity)
        {
            return db.Insert(entity);
        }
        /// <summary>
		/// 批量添加实体
		/// <param name="entities">传进的实体列表</param>
		/// </summary>
		public void BulkInsert(IEnumerable<LiveLog> entities)
        {
            db.BulkInsert(entities);
        }
        /// <summary>
        /// 更新实体
        /// <param name="entity">传进的实体</param>
        /// </summary>
        public int Update(Rule entity)
        {
            return db.Update(entity);
        }
        /// <summary>
        /// 删除实体
        /// <param name="entity">传进的实体</param>
        /// </summary>
        public int Delete(Rule entity)
        {
            return db.Delete(entity);
        }
        /// <summary>
        /// 删除实体
        /// <param name="Id">Id</param>
        /// <param name="tableName">tableName</param>
        /// </summary>
        public int Delete(int Id, string tableName = "")
        {
            var entity = Search(tableName).Where(b => b.Id == Id).First();
            if (entity == null) return -1;
            entity.Attach(EntityState.Deleted);
            return db.Save(entity);
        }
        /// <summary>
        /// 批量删除实体
        /// <param name="obj">传进的实体列表</param>
        /// </summary>
        public int Deletes(List<Rule> entities)
        {
            return db.Delete<Rule>(entities);
        }
        /// <summary>
        /// 持久化实体
        /// <param name="entity">传进的实体</param>
        /// </summary>
        public int Save(Rule entity)
        {
            return db.Save<Rule>(entity);
        }
        /// <summary>
        /// 批量持久化实体
        /// <param name="entities">传进的实体列表</param>
        /// </summary>
        public int Save(List<Rule> entities)
        {
            return db.Save<Rule>(entities);
        }
        /// <summary>
        /// 持久化实体
        /// <param name="tran">事务</param>
        /// <param name="entity">传进的实体</param>
        /// </summary>
        public int Save(DbTransaction tran, Rule entity)
        {
            return db.Save<Rule>(tran, entity);
        }
        /// <summary>
        /// 批量持久化实体
        /// <param name="tran">事务</param>
        /// <param name="entity">传进的实体列表</param>
        /// </summary>
        public int Save(DbTransaction tran, List<Rule> entities)
        {
            return db.Save<Rule>(tran, entities);
        }
        /// <summary>
        /// 执行sql语句
        /// <param name="sql"></param>
        /// </summary>
        public SqlSection FromSql(string sql)
        {
            return db.FromSql(sql);
        }
        /// <summary>
        /// 执行存储过程
        /// <param name="sql"></param>
        /// </summary>
        public ProcSection FromProc(string procName)
        {
            return db.FromProc(procName);
        }
    }

}

